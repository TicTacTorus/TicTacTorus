@page "/login"
@using TicTacTorus.Source
@using System.ComponentModel.DataAnnotations
@using System.Drawing
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacTorus.Source.Hubs
@inject NavigationManager NavigationManager

<div class="min-vw-100">
    <div class="my-5 lobbies-grid">
        <button class="btn-back" onclick="location.href ='/';">
            <svg class="bi bi-arrow-left" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M5.854 4.646a.5.5 0 010 .708L3.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z" clip-rule="evenodd"/>
                <path fill-rule="evenodd" d="M2.5 8a.5.5 0 01.5-.5h10.5a.5.5 0 010 1H3a.5.5 0 01-.5-.5z" clip-rule="evenodd"/>
            </svg>
        </button>
        <h1 class="headers my-auto">TicTacTorus</h1>
    </div>
    
    <div class="d-flex justify-content-center">
        <div class="row">
            <div class="col-sm-9 col-md-7 col-lg-6 mx-auto m-2">
                <div class="box-login">
                    <div class="container">
                        <h4 class="text-center">Login</h4>
                        <hr>
                        <EditForm Model="@_sign_in_player" OnValidSubmit="HandleTryLogin">
                            <div class="form-group">
                                <label for="loginLoginName">Login name*</label>
                                <InputText @bind-Value="_sign_in_player.LoginID" id="loginLoginName" class="form-control"  placeholder="Enter login name" required/>
                            </div>
                            <div class="form-group">
                                <label for="loginPassword">Password*</label>
                                <InputText type="password" @bind-Value="_sign_in_player.LoginPassword" class="form-control" id="loginPassword" placeholder="Enter Password" required/>
                            </div>
                            <div id="messageOutput" bind-Value="@loginMessage"></div>
                            <button type="submit" class="btn btn-primary" style="width: 100%">Sign In</button>
                        </EditForm>
                        <p class="text-center"><a href="#" class="btn">Forgot login name or password?</a></p>
                    </div>
                </div>
            </div>
            
            <div class="col-sm-9 col-md-7 col-lg-6 mx-auto m-2">
                <div class="box-login">
                    <div class="container">
                        <h4 class="text-center">Sign Up</h4>
                        <hr>
                        <EditForm Model="@_register_player" OnValidSubmit="HandleValidSubmit">
                            <div class="form-group">
                                <label for="registerLoginName">Login name*</label>
                                <InputText id="registerLoginName" @bind-Value="_register_player.Identifier" 
                                           class="form-control" placeholder="Enter login name" required />
                            </div>
                            <div class="form-group">
                                <label for="registerInGameName">In-Game name</label>
                                <InputText id="registerInGameName" @bind-Value="_register_player.IngameName" 
                                           class="form-control" aria-describedby="inGameNameHelp" placeholder="Name In-Game"/>
                            </div>
                            <div class="form-group">
                                <label for="registerEmail">Email address</label>
                                    <InputText type="email" id="registerEmail" @bind-Value="_register_player.EMail" 
                                               class="form-control" aria-describedby="emailHelp" placeholder="Enter email"/>
                                    
                                    <small id="emailHelp" class="form-text text-muted">Info: You cannot reset you password without an E-Mail!</small>
                            </div>
                            <div class="form-group">
                                <label for="registerPassword">Password*</label>
                                <InputText type="password" id="registerPassword" @bind-Value="_register_player.Password"
                                           class="form-control"  placeholder="Password" required/>
                            </div>
                            <div class="form-group">
                                <label for="registerConfirmPassword">Confirm Password*</label>
                                <input type="password" id="registerConfirmPassword" class="form-control" placeholder="Password" required>
                            </div>
                            <button type="submit" class="btn btn-primary" style="width: 100%">Sign Up</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private ConnectionHubClient _client;
    private string userInput;
    private string loginMessage;
    
    TemporaryLoginPlayer _sign_in_player = new TemporaryLoginPlayer();
    
    class TemporaryLoginPlayer
    {
        [Required]
        [StringLength(16, ErrorMessage = "ID is too long (max 16 character).")]
        public string LoginID { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "Password should contain at least {2} characters.", MinimumLength = 8)]
        public string LoginPassword { get; set; }
    }

    private  TemporaryRegisterPlayer _register_player = new TemporaryRegisterPlayer();
    /* For registerdata storage */    
    class TemporaryRegisterPlayer
    {
        [Required]
        [StringLength(16, ErrorMessage = "Identifier too long (16 character limit).")]
        public string Identifier { get; set; }
        
        [Required]
        public string Password { get; set; }

        public string IngameName { get; set; }

        public string EMail { get; set; }
    }
}

@functions
{
    protected override void OnInitialized()
    {
        _client = new ConnectionHubClient(NavigationManager);

        _client.Connection.On<HumanPlayer>("ReceiveConfirmation", (player) =>
        {
            if (player == null)
            {
                
            }
            StateHasChanged();
        });
        
        _client.Connection.On<string>("LoginFailed", message =>
        {
            loginMessage = message;
            StateHasChanged();
        });
    }
    
    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    private void HandleTryLogin()
    {
        TryLogin();
    }

    Task TryLogin() =>
        _client.Connection.SendAsync("ConfirmLogin", _sign_in_player.LoginID, _sign_in_player.LoginPassword );

    public bool IsConnected =>
        _client.Connection.State == HubConnectionState.Connected;
}
