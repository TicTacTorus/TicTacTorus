@page "/info"

@using TicTacTorus.Source.Hubs
@using TicTacTorus.Source
@using TicTacTorus.Source.Generator
@using TicTacTorus.Source.PlayerSpecificContent
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

<div class="my-5 lobbies-grid">
    <button class="btn-back" onclick="location.href ='/';">
        <svg class="bi bi-arrow-left" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M5.854 4.646a.5.5 0 010 .708L3.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z" clip-rule="evenodd"/>
            <path fill-rule="evenodd" d="M2.5 8a.5.5 0 01.5-.5h10.5a.5.5 0 010 1H3a.5.5 0 01-.5-.5z" clip-rule="evenodd"/>
        </svg>
    </button>
    <h1 class="headers my-auto">TicTacTorus</h1>
        @if (User.ID != null)
        {
            <button @onclick="DirectToAccount" class="btn-back float-right" data-toggle="tooltip" data-placement="bottom" title="Account">
                <svg class="bi bi-person-fill" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
                </svg>
            </button>
        }
</div>

<div class="container">
    <div class="row mb-5">
        <div class="col-sm-8 col-md-8 col-lg-10 mx-auto">
            <div class="box w-100 p-3">
                <h3 class="text-center mt-1"><b>Rules</b></h3>
                <hr>
                <p>The player's order will be randomised after the game starts.</p>
                <p>Then the first player is allowed to place his symbol on a field.</p>
                <p>The others follow him depending on their Order.</p>
                <p>After a player managed to place a certain amount of his symbols side by side, he wins the game.</p>
                <p>The amount of symbols needed can be defined by the lobby settings.</p>
                
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-9 col-md-8 col-lg-4 mx-auto mt-1">
            <div class="box w-100 h-100 p-3">
                <h3 class="text-center mt-1"><b>Changelog</b></h3>
                <hr>
                <textarea class="w-100 text-left" style="resize: none" readonly>
                      
                    </textarea>
            </div>
        </div>
        <div class="col-sm-9 col-md-8 col-lg-4 mx-auto mt-1">
            <div class="box w-100 p-3">
                <h3 class="text-center mt-1"><b>Credits</b></h3>
                <hr>
                <div class="text-center">
                    <h4>Created by</h4>
                    <p>Jack Maier</p>
                    <p>Marco Riemer</p>
                    <p>Tim Guddat</p>
                    <p>Sarah Müller</p>
                    <p>Daniel Wiegert</p>
                    <p>Marco Velten</p>
                </div>
            </div>
        </div>
    </div>
</div>


@code
{
    private ConnectionHubClient _client;
    private HumanPlayer User { get; set; } = new HumanPlayer();
}

@functions
{

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if ((User = await ProtectedSessionStore.GetAsync<HumanPlayer>("LoginData")) == null)
        {
            User = PlayerFactory.CreateHumanPlayer();
            await ProtectedSessionStore.SetAsync("LoginData", User);
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _client = new ConnectionHubClient(NavigationManager);
    }
    
    private void DirectToAccount()
    {
        NavigationManager.NavigateTo("/user/" + User.ID);
    }
}