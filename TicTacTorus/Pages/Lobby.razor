@page "/game"
@page "/game/{IdString}"

@using TicTacTorus.Source
@using System.Drawing
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacTorus.Source.Generator
@using TicTacTorus.Source.LobbySpecificContent
@using TicTacTorus.Source.PlayerSpecificContent
@inject NavigationManager NavigationManager


@{
    // if angemeldet 
    // else generiere Name/Player
    IPlayer i_am;

    var name = AnonymPlayerNameGenerator.GetString();
    var color = ColorGenerator.GetColor();
    var symbol = ByteGenerator.GetByte();
    i_am = new HumanPlayer("xyz", name, color, symbol);
    
    InitLobby();
}
<div class="my-5 lobbies-grid">
    <button class="btn-back" onclick="location.href ='/';">
        <svg class="bi bi-arrow-left" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M5.854 4.646a.5.5 0 010 .708L3.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z" clip-rule="evenodd"/>
            <path fill-rule="evenodd" d="M2.5 8a.5.5 0 01.5-.5h10.5a.5.5 0 010 1H3a.5.5 0 01-.5-.5z" clip-rule="evenodd"/>
        </svg>
    </button>
    <h1 class="headers">@_lobby.Name</h1>
</div>
<div contenteditable="true" class="text-center my-3">
    <p @ref="DisplayDescriptionReference">@_lobby.Description</p>
</div>
<div class="d-flex justify-content-center">
    
    <div class="row">
        <div class="col-sm-9 col-md-7 col-lg-4 mx-auto my-1">
            <!-- Players Box -->
            <div class="box box-lobby w-100">
                <div class="box-content">
                    <b><h3 class="text-center">Players (0/0)</h3></b>
                    <hr>
                    <div>
                        <table id="player_table_in_lobby">
                            @foreach (var elem in _lobby.GetAllPlayers())
                            {
                                <!--<tr id="player_table_row">
                                    <td><button onclick='MessageChatBox("@elem.ID got kicked")'>Kick</button></td>
                                    <td>@elem.IngameName</td>
                                    <td>@elem.Symbol</td>
                                </tr>-->
                                <tr id="player_table_row">
                                    @if (@elem != _lobby.GetPlayerAt(0))
                                    {
                                        <td><button @onclick="@(() => RemovePlayerFromLobby(@elem))">Kick</button></td>
                                    }
                                    <td>
                                        @{
                                            var classText = "color:" + ColorTranslator.ToHtml(@elem.Color) + ";";
                                            classText += "\nfont-size: large;" +
                                                         "\nfont-weight: bold;";
                                            classText += "\ntext-shadow: 1px 1px 0px black;";
                                            <div style="@classText">@elem.IngameName</div>
                                        }
                                    </td>
                                    <td>@elem.Symbol</td>
                                </tr>
                            }
                        </table>
                        <!-- Content goes here -->
                    </div>
                </div>
            </div>
        </div>

        <div class="col-sm-9 col-md-7 col-lg-4 mx-auto my-1">
            <!-- Chat Box -->
            <div class="box box-lobby w-100">
                <div class="box-content">
                    <b><h3 class="text-center">Chat</h3></b>
                    <hr>
                    <textarea id="messagesList" readonly>@foreach (var message in _messages)
                                                         {
                                                             @message<br>
                                                         }
                    </textarea>
                    <input @bind="_messageInput" @onkeyup="SendChatMessage" disabled="@(!IsConnected)" class="w-100 align-bottom"/>
                </div>
            </div>
            <div class="below-chat col">
                <h5 class="text-center">Share this link to invite others</h5>
                <!--<div style="border-style: solid; border-width: 1px; border-radius: 10px; background: #ffffff" class="text-center my-2">
                    http://www.brammens.com
                </div>-->
                <button id="link-copy" class="btn btn-primary-custom p-2" onclick="CopyText"> @InviteLink </button>
                <button class="btn btn-primary-custom p-2" @onclick="CreateGame">
                    <svg class="bi bi-play-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M11.596 8.697l-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 010 1.393z"/>
                    </svg>
                    Play
                </button>
            </div>
        </div>

        <div class="col-sm-9 col-md-7 col-lg-4 mx-auto my-1">
            <!-- Settings Box -->
            <div class="box box-lobby w-100">
                <div class="box-content">
                    <b><h3 class="text-center">Settings</h3></b>
                    <hr>
                    <div>
                        <!-- Content goes here -->
                        <table>
                            <tr>
                                <!--<EditForm Model="@_lobby" OnValidSubmit="HandleDescriptionChange">
                                    <label>Description</label>
                                    <InputText id="host_description" type="text" @bind-value="_lobby.Description"
                                               name="host_description" size="64" class="w-100 align-bottom"/>
                                </EditForm>-->
                            </tr>
                            <tr>
                                
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    static ILobby _lobby = new Source.LobbySpecificContent.Lobby();
    // var text = Request["host_description"];
    /*private string LobbyStatus
    {
        get { return _lobby.Status; }
        set { _lobby.Status = value; }
    //set { SendChangedLobbyParameter(LobbyParameterAsString.Status, value); }
    } */

    private string InviteLink { get; set; } = "tictactorus.de/game/";
    
    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private string _messageInput;

    [Parameter] 
    public string IdString { get; set; }
    private static string _id;

    // for changing text-elements etc.
    ElementReference DisplayDescriptionReference;
}

@functions{
    // For Mocking purpose
    static void InitLobby()
    {
        HumanPlayer creator = new HumanPlayer("Tim", "NicerDicer", Color.Coral, 111);
        _lobby = Source.LobbySpecificContent.LobbyFactory.CreateLobbyNoId(creator);
        InitPlayerList();
    }
    static void InitPlayerList()
    {
        _lobby.AddPlayer(new HumanPlayer("Eleven", "Caaarl", Color.DodgerBlue, 3));
        _lobby.AddPlayer(new HumanPlayer("Daniela", "Daisy", Color.Aquamarine, 120));
    }

    private void CreateGame()
    {
        NavigationManager.NavigateTo("/ingame/" + _id);
    }
    
    static IEnumerable<IPlayer> PlayerList()
    {
        var lobbies = _lobby.GetAllPlayers();
        foreach (var elem in lobbies)
        {
            yield return elem;
        }
    }
    static void HandleDescriptionChange()
    {
        // TODO: HubConnection for Whole Lobby
    }

    void RemovePlayerFromLobby(IPlayer player)
    {
        // remove them
        _lobby.RemovePlayer(player);
        // message remaining players
        SendSystemMessage(player.IngameName + " was removed by the Host");
    }

    protected override async Task OnInitializedAsync()
    {
        _id = IdString;
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"))
            .Build();


        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("JoinLobby", IdString);
    }

    void SendChatMessage(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _hubConnection.SendAsync("SendMessage", IdString, "Tim", _messageInput);
            _messageInput = "";
        }
    }

    void SendSystemMessage(string message)
    {
        _hubConnection.SendAsync("SendMessage", IdString, "Game", message);
    }
    /*
    void SendChangedLobbyParameter(string lobbyParam, string changedValue)
    {
        _hubConnection.SendAsync("ChangeLobbyStat", IdString, lobbyParam, changedValue);
    }*/

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;
}