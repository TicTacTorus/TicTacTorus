@page "/game"

@using TicTacTorus.Source
@using System.Drawing
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacTorus.Source.Generator
@using TicTacTorus.Source.LobbySpecificContent
@inject NavigationManager NavigationManager


@{
    // if angemeldet 
    // else generiere Name/Player
    IPlayer i_am;

    var name = AnonymPlayerNameGenerator.GetString();
    var color = ColorGenerator.GetColor();
    var symbol = ByteGenerator.GetByte();
    i_am = new HumanPlayer("xyz", name, color, symbol);
    
    
}
<div class="my-5 lobbies-grid">
    <button class="btn-back" onclick="location.href ='/';">
        <svg class="bi bi-arrow-left" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M5.854 4.646a.5.5 0 010 .708L3.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z" clip-rule="evenodd"/>
            <path fill-rule="evenodd" d="M2.5 8a.5.5 0 01.5-.5h10.5a.5.5 0 010 1H3a.5.5 0 01-.5-.5z" clip-rule="evenodd"/>
        </svg>
    </button>
    <h1 class="headers">Tim's Lobby</h1>
</div>
<div contenteditable="true" class="text-center my-3">
    <p>@LobbyDescription</p>
</div>
<div class="d-flex justify-content-center">
    
    <div class="row">
        <div class="col-sm-9 col-md-7 col-lg-4 mx-auto my-1">
            <!-- Players Box -->
            <div class="box box-lobby w-100">
                <div class="box-content">
                    <b><h3 class="text-center">Players (0/0)</h3></b>
                    <hr>
                    <div>
                        <table id="player_table_in_lobby">
                            @foreach (var elem in PlayerList())
                            {
                                <tr id="player_table_row">
                                    <td><button onclick='MessageChatBox("@elem.ID got kicked")'>Kick</button></td>
                                    <td>@elem.IngameName</td>
                                    <td>@elem.Symbol</td>
                                </tr>
                            }
                        </table>
                        <!-- Content goes here -->
                    </div>
                </div>
            </div>
        </div>

        <div class="col-sm-9 col-md-7 col-lg-4 mx-auto my-1">
            <!-- Chat Box -->
            <div class="box box-lobby w-100">
                <div class="box-content">
                    <b><h3 class="text-center">Chat</h3></b>
                    <hr>
                    <textarea id="messagesList" readonly>
                        @foreach (var message in messages)
                            {
                                @message<br>
                            }
                    </textarea>
                    <input @bind="messageInput" @onkeyup="SendMessage" disabled="@(!IsConnected)" class="w-100 align-bottom"/>
                </div>
            </div>
            <div class="below-chat col">
                <h5 class="text-center">Share this link to invite others</h5>
                <!--<div style="border-style: solid; border-width: 1px; border-radius: 10px; background: #ffffff" class="text-center my-2">
                    http://www.brammens.com
                </div>-->
                <button id="link-copy" class="btn btn-primary-custom p-2" onclick="CopyText"> @InviteLink </button>
                <button class="btn btn-primary-custom p-2" onclick="location.href ='ingame';">
                    <svg class="bi bi-play-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M11.596 8.697l-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 010 1.393z"/>
                    </svg>
                    Play
                </button>
            </div>
        </div>

        <div class="col-sm-9 col-md-7 col-lg-4 mx-auto my-1">
            <!-- Settings Box -->
            <div class="box box-lobby w-100">
                <div class="box-content">
                    <b><h3 class="text-center">Settings</h3></b>
                    <hr>
                    <div>
                        <!-- Content goes here -->
                        <table>
                            <tr>
                                <form name="description" action="" method="post">
                                    <div>Description</div>
                                    <input name="host_description" type="text" id="host_description" size="64" class="w-100 align-bottom"/>
                                    <input name="submit_description" type="submit" id="submit_description" value="Change"/>
                                </form>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    private static ILobby _lobby = new Source.LobbySpecificContent.Lobby("Tim's Game", "Just opened", "Tim's Description", 4, false);
    private string LobbyName { get; set; } = _lobby.Name;
    private string LobbyDescription { get; set; } = "Blaabla";
    // var text = Request["host_description"];
    private string LobbyStatus { get; set; } = _lobby.Status;
    
    private string InviteLink { get; set; } = "TicTacTorus.de/lobby/2nd83jf81";
    
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;
}

@functions{
    static ILobby lobby = new Source.LobbySpecificContent.Lobby("Tim's Wunderland", 3, true);
    //Method that returns a iterator of all lobbies (yield return)    
    static void InitPlayerList()
    {
        lobby.addPlayer(new HumanPlayer("Tim", "NicerDicer", Color.Coral, 111));
        lobby.addPlayer(new HumanPlayer("Daniela", "Daisy", Color.Aquamarine, 120));
    }

    static IEnumerable<IPlayer> PlayerList()
    {
        var lobbies = lobby.GetAllPlayers();
        foreach (var elem in lobbies)
        {
            yield return elem;
        }
    }

    void SendMessage(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Send();
        }
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", "Tim", messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
    
}