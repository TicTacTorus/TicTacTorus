@page "/ingame/{IdString}"

@using Microsoft.AspNetCore.SignalR.Client
@using TicTacTorus.Source.Hubs
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@using TicTacTorus.Source.Canvas
@using TicTacTorus.Source.Generator
@using TicTacTorus.Source.Ingame.GridSpecificContent.Chunk
@using TicTacTorus.Source.Ingame.GridSpecificContent.Position
@using Newtonsoft.Json
@using TicTacTorus.Source.PlayerSpecificContent
@using System.Drawing
@using TicTacTorus.Source.Ingame.Move
@using TicTacTorus.Source.ServerHandler
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IJSRuntime JSRuntime;

<!--<div class="fill">&nbsp;</div>-->

<div class="canvas" @onwheel="MouseScrollHandler" @onmousemove="MouseMoveHandler" @onmousedown="MouseDownHandler" @onmouseup="MouseUpHandler">
    <BECanvas @ref="_canvasGame" Width="640" Height="480"></BECanvas>
</div>


<div class="nav-container float-right position-absolute" style="top: 0px; right: 0px">
    <div class="box box-map">
        <!--<div class="p-5 text-center">
            Minimap Content
        </div>-->
        <BECanvas @ref="_canvasMap" Width="100" Height="100"></BECanvas>
    </div>
    @if(IsConnected)
    {
        <div class=" box box-map">
            <div class="box-game">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a class="@_navOne" @onclick="NavClick">Chat</a>
                    </li>
                    <li class="nav-item">
                        <a class="@_navTwo" @onclick="NavClick">Players</a>
                    </li>
                </ul>
                <div class="tab-content p-1">
                    <div role="tabpanel" class="@_navContentOne" id="chat-content">
                        <textarea id="messagesListIngame" readonly>@foreach (var message in _messages)
                                                                   {
                                                                       @message<br>
                                                                   } 
                        </textarea> 
                        <input @bind="_messageInput" @onkeyup="SendChatMessage" disabled="@(!IsConnected)" class="w-100 align-bottom"/>
                    </div>
                    <div role="tabpanel" class="@_navContentTwo" id="player-content">
                        @if (_game != null)
                        {
                            @foreach (var player in _game.players)
                            {
                                <table>
                                    @{
                                        var classText = "color:" + ColorTranslator.ToHtml(@player.PlrColor) + ";" +
                                                        "\nfont-size: large;" +
                                                        "\nfont-weight: bold;" +
                                                        "\ntext-shadow: 1px 1px 0px black;";
                    
                                        <div style="@classText">@player.InGameName</div>
                                    }
                                </table>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code
{
    private ConnectionHubClient _client;
    private string _navContentOne = "tab-pane active";
    private string _navContentTwo = "tab-pane";
    private string _navOne = "nav-link active";
    private string _navTwo = "nav-link";
    private bool _navClicked;

    private bool _mouseDown = false;
    private double _mouseDistance = 0;
    private double _mouseStartX = 0;
    private double _mouseStartY = 0;
    private double _mousePrevX = 0;
    private double _mousePrevY = 0;
    private const double MaxClickDistance = 10;

    private bool _isActive = false;
    
    private List<string> _messages = new List<string>();
    private string _messageInput;
    
    #region Hub Fields
    [Parameter] public string IdString { get; set; }
    private ClientGame _game = null;
    JsonSerializerSettings _jsonSerializerSettings = new JsonSerializerSettings() {
        TypeNameHandling = TypeNameHandling.All
    };
    #endregion
    
    //game stuff
    //todo: set on game start
    private static byte _myIndex = 0;
    
    //canvas stuff
    private static Canvas2DContext _contextGame, _contextMap;
    protected static BECanvasComponent _canvasGame, _canvasMap;

    //local copy of the grid, this gets updated and displayed
    private static Grid _grid = GenerateTempMockGrid();
    private static GlobalPos _lastChange = new GlobalPos(0, 0);

    private static GameRenderer _rendererGame = new GameRenderer(_grid);
    private static MapRenderer _rendererMap = new MapRenderer(null);
    
    private static HumanPlayer User { get; set; }

    public bool IsConnected = false;

}

@functions
{
    #region Navigation Stuff
    
    private void NavClick()
    {
    //I know can be simplified, but I'm lazy (Sorry ^^)
        _navClicked = !_navClicked;
        if (_navClicked)
        {
    //Player Tab is now Active
            _navContentTwo = _navContentOne;
            _navContentOne = _navContentOne.Substring(0, _navContentOne.IndexOf(" ", StringComparison.Ordinal));
            _navTwo = _navOne;
            _navOne = _navOne.Substring(0, _navOne.IndexOf(" ", StringComparison.Ordinal));
        }
        else
        {
    //Chat Tab is now Active
            _navContentOne = _navContentTwo;
            _navContentTwo = _navContentTwo.Substring(0, _navContentTwo.IndexOf(" ", StringComparison.Ordinal));
            _navOne = _navTwo;
            _navTwo = _navTwo.Substring(0, _navTwo.IndexOf(" ", StringComparison.Ordinal));
        }
    }
    

    #endregion
    #region Site Functionality

    void SendChatMessage(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _client.Connection.SendAsync("SendMessage", IdString, User.InGameName, _messageInput);
            _messageInput = "";
        }
    }

    void SendSystemMessage(string message)
    {
        _client.Connection.SendAsync("SendMessage", IdString, "Game", message);
    }
    /*
    void SendChangedLobbyParameter(string lobbyParam, string changedValue)
    {
        _hubConnection.SendAsync("ChangeLobbyStat", IdString, lobbyParam, changedValue);
    }*/
    

    private async void MouseScrollHandler(WheelEventArgs evnt)
    {
        if (Math.Abs(evnt.DeltaY) < 0.0001)
        {
            return;
        }
        
        _rendererGame.Zoom(-Math.Sign(evnt.DeltaY), evnt.ClientX, evnt.ClientY);
        await RedrawGame();
    }

    private async void MouseMoveHandler(MouseEventArgs evnt)
    {
        if (!_mouseDown)
        {
            return;
        }
        var dx = _mousePrevX - evnt.ClientX;
        var dy = _mousePrevY - evnt.ClientY;
        var dragged = Math.Sqrt(dx * dx + dy * dy);
        _mouseDistance += dragged;

        if (_mouseDistance > MaxClickDistance)
        {
            _rendererGame.MoveZoomedViewpoint(dx, dy);
            await RedrawGame();
        }
            
        _mousePrevX = evnt.ClientX;
        _mousePrevY = evnt.ClientY;
    }

    private async void MouseDownHandler(MouseEventArgs evnt)
    {
        _mouseStartX = _mousePrevX = evnt.ClientX;
        _mouseStartY = _mousePrevY = evnt.ClientY;
        _mouseDistance = 0;
        _mouseDown = true;
    }

    private async void MouseUpHandler(MouseEventArgs evnt)
    {
        if (_mouseDistance <= MaxClickDistance)
        {
            var width = await JSRuntime.InvokeAsync<int>("client_width");
            var height = await JSRuntime.InvokeAsync<int>("client_height");
            
            var pos = _rendererGame.GetCursorPosition(evnt.ClientX, evnt.ClientY, width, height);
            Console.WriteLine($"Click Detected at {pos}!");

            
            /*
            var owner = _grid.GetSymbol(pos);
            switch (owner)
            {
                case 19:
                    owner = BasicChunk.NoOwner;
                    break;
                case BasicChunk.NoOwner:
                    owner = 0;
                    break;
                default:
                    ++owner; break;
            }
            */

            SendPlacementMove(pos);
            _grid.SetSymbol(pos, _myIndex, true);
            await RedrawGame();
        }
        
        _mouseDown = false;
    }

    #endregion
  
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    #region ClientServerHandling
        if (firstRender)
        {
            _client = new ConnectionHubClient(NavigationManager);
        
            #region Client Listeners

            _client.Connection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                var encodedMsg = $"{user}: {message}";
                _messages.Add(encodedMsg);
                StateHasChanged();
            });
            
            
            _client.Connection.On<string>("ReceivePlayerMove", (moveObj) =>
            {
    //ReceivedMove = moveObj;
                StateHasChanged();
            });
            _client.Connection.On<string>("AnnounceWinner", (winnerName) =>
            {
    //Winner = winnerName;
                StateHasChanged();
            });

            _client.Connection.On("ActivatePlayer", () =>
            {
                _isActive = true;
    //activate control buttons / allow making a move
            });

            #endregion

    /*
            if ((User = await ProtectedSessionStorage.GetAsync<HumanPlayer>("LoginData")) == null)
            {
                User = PlayerFactory.CreateHumanPlayer();
                await ProtectedSessionStorage.SetAsync("LoginData", User);
            }*/

            if ((User = await ProtectedSessionStorage.GetAsync<HumanPlayer>("LoginData")) == null)
            {
    // Fehlermeldung an User
                NavigationManager.NavigateTo("/?error=IdLost");
            }

            _client.Connection.On<string>("ReceiveGameInformation", (jsGame) =>
            {
                _game = JsonConvert.DeserializeObject<ClientGame>(jsGame, _jsonSerializerSettings);
                if (_game != null) _client.Connection.SendAsync("OnUserConnectedToLobby", _game.players.IndexOf(User));
                // maybe init stuff from game
                StateHasChanged();
            });
            
            _client.Connection.On<string>("ConnectToGameFailed", (errormessage)  =>
            {
                NavigationManager.NavigateTo("/?error="+errormessage);  
            });

            //await _client.Connection.SendAsync("InitGameId", IdString, User.SessionID);
            var jsonUser = JsonConvert.SerializeObject(User, _jsonSerializerSettings);
            await _client.Connection.SendAsync("ConnectToGame", IdString, jsonUser);
            
            IsConnected = _client.Connection.State == HubConnectionState.Connected;
        }
    #endregion
    #region Canvas
    //todo current problems:
    //resizing the window also needs to trigger a resize of the canvas.
    //moving the viewpoint of the game renderer stops new lines from rendering.
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("stretch_first_canvas");
            await UpdateCanvasSize();
        }
        
        _contextGame = await _canvasGame.CreateCanvas2DAsync();
        _contextMap = await _canvasMap.CreateCanvas2DAsync();
        
        if (firstRender)
        {
            await RedrawGame();
            await RedrawMap();
            
            await _rendererGame.Draw((int)_canvasGame.Width, (int)_canvasGame.Height, _contextGame);
            await _rendererMap.Draw((int) _canvasMap.Width, (int) _canvasMap.Height, _contextMap);
        }
        #endregion
    }
    
    #region Canvas

    [JSInvokable]
    public async Task UpdateCanvasSize()
    {
        var width = await JSRuntime.InvokeAsync<int>("client_width");
        var height = await JSRuntime.InvokeAsync<int>("client_height");
        _canvasGame.Width = width;
        _canvasGame.Height = height;
    }
    
    [JSInvokable]
    public static async Task RedrawGame()
    {
        _contextGame = await _canvasGame.CreateCanvas2DAsync();
        await _rendererGame.Draw((int)_canvasGame.Width, (int)_canvasGame.Height, _contextGame);
    }
    
    [JSInvokable]
    public static async Task RedrawMap()
    {
        _contextMap = await _canvasMap.CreateCanvas2DAsync();
        await _rendererMap.Draw((int)_canvasMap.Width, (int)_canvasMap.Height, _contextMap);
    }
    
    public static Grid GenerateTempMockGrid()
    {
    //todo remove me once we synchronize the real grid!
        const int width = 50, height = 50, players = 20;
        var items = (int)Math.Sqrt(width * height);
        
        var grid = new Grid(width, height);
        var rnd = new Random();
        var posGen = new PositionGenerator(rnd);
        for (var y = 0; y < grid.Height; ++y)
        {
            grid.SetSymbol(new GlobalPos(0, y), 0);
        }
        for (var x = 0; x < grid.Width; ++x)
        {
            grid.SetSymbol(new GlobalPos(x, 0), 0);
        }

        for (var i = 0; i < items; ++i)
        {
            var pos = posGen.GetGlobalPos(width, height);
            grid.SetSymbol(pos, (byte)rnd.Next(players), false);
        }
        return grid;
    }

    #endregion
    #region Communication

    private void InitializeClient(byte playerIndex, int gridSize /*maybe more?*/)
    {
        _myIndex = playerIndex;
        _grid = new Grid(gridSize, gridSize);
    }
    
    private void SendPlacementMove(GlobalPos pos)
    {
        var move = new PlacementMove(_myIndex, pos);
        _client.Connection.SendAsync("ReceivePlacementMove", IdString, move);
    }
    
    #endregion
}