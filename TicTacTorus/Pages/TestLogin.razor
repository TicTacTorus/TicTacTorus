@page "/Q"
@using TicTacTorus.Source.Hubs
@using Microsoft.AspNetCore.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using TicTacTorus.Source
@using TicTacTorus.Source.Generator
@using Microsoft.AspNetCore.Mvc.ModelBinding
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-center my-5">
    <h1 class="headers">TicTacTorus</h1>
</div>
@if (isConnected)
{
    <div class="min-vw-100">
        <div class="d-flex justify-content-center">
            <div class="row">
                <div class="col-sm-9 col-md-7 col-lg-6 mx-auto m-2">
                    <div class="box-login">
                        <div class="container">
                            @if (_user == null)
                            {
                                <h4 class="text-center">Login</h4>
                                <hr>
                                @if (loginFailed)
                                {
                                    <h5>@_errorMsg</h5>
                                }
                                <input type="text" @bind-value="@_id"/>
                                <input type="text" @bind-value="@_pw"/>
                                <button @onclick="TryLogin" class="btn btn-primary" style="width: 100%">Sign In</button>

                                <p class="text-center"><a href="#" class="btn">Forgot login name or password?</a></p>
                            }
                            else
                            {
                                <h4 class="text-center">Welcome back, @_user.ID</h4>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="min-vw-100">
        <div class="d-flex justify-content-center">
            <p>Loading...</p>
        </div>
    </div>
}

@code
{
    /* https://docs.microsoft.com/de-de/aspnet/core/blazor/state-management?view=aspnetcore-3.1 */
    private ConnectionHubClient _client;

    private string _id;
    private string _pw;
    private string _errorMsg;
    
    private HumanPlayer _user;
    
    private bool isConnected;
    private bool loginFailed;
}

@functions
{
    protected override void OnInitialized()
    {
        _client = new ConnectionHubClient(NavigationManager);

        _client.Connection.On<string>("LoginSuccess", async (player) =>
        {
            try
            {
                _user = JsonConvert.DeserializeObject<HumanPlayer>(player);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception aufgetaucht in TestLogin: " + e);
                _user = PlayerFactory.CreateHumanPlayer();
            }

            await ProtectedSessionStore.SetAsync("LoginData", _user);
            StateHasChanged();
        });
        
        _client.Connection.On<string>("LoginFailed",  (message) =>
        {
            _errorMsg = message;
            loginFailed = true;
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
    // When execution reaches this point, the first *interactive* render
    // is complete. The component has an active connection to the browser.
            isConnected = true;
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    private async Task LoadStateAsync()
    {
        _user = await ProtectedSessionStore.GetAsync<HumanPlayer>("LoginData");
    }

    private async Task TryLogin()
    {
        if (_client != null)
        {
            await _client.Connection.SendAsync("ConfirmLogin", _id, _pw );
        }
    }
}