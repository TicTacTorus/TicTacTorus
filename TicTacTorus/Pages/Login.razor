@page "/login"
@using TicTacTorus.Source
@using System.Drawing
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using TicTacTorus.Source.Generator
@using TicTacTorus.Source.Hubs
@using TicTacTorus.Source.LoginContent.Validation
@using TicTacTorus.Source.PlayerSpecificContent
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

<div class="min-vw-100">
    <div class="my-5 lobbies-grid">
        <button class="btn-back" onclick="location.href ='/';">
            <svg class="bi bi-arrow-left" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M5.854 4.646a.5.5 0 010 .708L3.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z" clip-rule="evenodd"/>
                <path fill-rule="evenodd" d="M2.5 8a.5.5 0 01.5-.5h10.5a.5.5 0 010 1H3a.5.5 0 01-.5-.5z" clip-rule="evenodd"/>
            </svg>
        </button>
        <h1 class="headers my-auto">TicTacTorus</h1>
    </div>
    
    <div class="d-flex justify-content-center">
        <div class="row">
            <div class="col-sm-9 col-md-7 col-lg-6 mx-auto m-2">
                <div class="box-login">
                    <div class="container">
                        <h4 class="text-center">Login</h4>
                        <hr>
                        @if (_showLoginMsg)
                        {
                            <small>@_loginMessage</small>
                        }
                        <EditForm Model="@_loginPlayer" OnValidSubmit="SendLoginRequest">
                            <div class="form-group">
                                <label for="loginLoginName">Login name*</label>
                                <InputText @bind-Value="_loginPlayer.Id" id="loginLoginName" class="form-control"  placeholder="Enter login name" required/>
                            </div>
                            <div class="form-group">
                                <label for="loginPassword">Password*</label>
                                <InputText type="password" @bind-Value="_loginPlayer.Password" class="form-control" id="loginPassword" placeholder="Enter Password" required/>
                            </div>
                            <button type="submit" class="btn btn-primary" style="width: 100%">Sign In</button>
                        </EditForm>
                        <p class="text-center"><a href="#" class="btn">Forgot login name or password?</a></p>
                    </div>
                </div>
            </div>
            
            <div class="col-sm-9 col-md-7 col-lg-6 mx-auto m-2">
                <div class="box-login">
                    <div class="container">
                        <h4 class="text-center">Sign Up</h4>
                        <hr>
                        @if (_showRegisterMsg)
                        {
                            <small>@_registerMessage</small>
                        }
                        <EditForm Model="@_registerPlayer" OnValidSubmit="SendRegisterRequest">
                            <div class="form-group">
                                <label for="registerLoginName">Login name*</label>
                                <InputText id="registerLoginName" @bind-Value="_registerPlayer.Id" 
                                           class="form-control" placeholder="Enter login name" required autocomplete="off"/>
                            </div>
                            <div class="form-group">
                                <label for="registerInGameName">In-Game name*</label>
                                <InputText id="registerInGameName" @bind-Value="_registerPlayer.InGameName" 
                                           class="form-control" aria-describedby="inGameNameHelp" placeholder="Name In-Game" autocomplete="off"/>
                            </div>
                            <div class="form-group">
                                <label for="registerPassword">Password*</label>
                                <InputText type="password" id="registerPassword" @bind-Value="_registerPlayer.Password"
                                           class="form-control"  placeholder="Password" required autocomplete="off"/>
                            </div>
                            <div class="form-group">
                                <label for="registerConfirmPassword">Confirm Password*</label>
                                <InputText type="password" id="registerConfirmPassword" @bind-Value="_registerPlayer.ConfirmPassword"
                                           class="form-control" placeholder="Password" required autocomplete="off"/>
                            </div>
                            <button type="submit" class="btn btn-primary" style="width: 100%">Sign Up</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private ConnectionHubClient _client;
    private string _loginMessage;
    private string _registerMessage;
    private bool _showRegisterMsg, _showLoginMsg;
    
    private HumanPlayer User { get; set; }

    private readonly UserLoginValidation _loginPlayer = new UserLoginValidation();
    private readonly UserRegisterValidation _registerPlayer = new UserRegisterValidation();
}

@functions
{

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _client = new ConnectionHubClient(NavigationManager);

            #region Register Listeners
        
            _client.Connection.On<string>("RegisterSuccess", (message) =>
            {
                _registerMessage = message;
                _showRegisterMsg = true;
                StateHasChanged();
            });

            _client.Connection.On<string>("RegisterFailed", (message) =>
            {
                _registerMessage = message;
                _showRegisterMsg = true;
                StateHasChanged();
            });
        
            #endregion
            #region Login Listeners
        
            _client.Connection.On<string>("LoginSuccess", async (player) =>
            {
                try
                {
                    User = JsonConvert.DeserializeObject<HumanPlayer>(player);
                    await SendSessionIdRequest(User.ID);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception aufgetaucht in TestLogin: " + e);
                    User = PlayerFactory.CreateHumanPlayer();
                }

                await ProtectedSessionStore.SetAsync("LoginData", User);
                NavigationManager.NavigateTo("/");
            });
        
            _client.Connection.On<string>("LoginFailed",  (message) =>
            {
                _loginMessage = message;
                _showLoginMsg = true;
                StateHasChanged();
            });
        
        #endregion

    //ProtectedSessionStore Calls need to be done in OnAfterRenderAsync!
            User = await ProtectedSessionStore.GetAsync<HumanPlayer>("LoginData");
        }
    }

    private async Task SendLoginRequest()
    {
        if (_client != null)
        {
            await _client.Connection.SendAsync("ConfirmLogin", _loginPlayer.Id, _loginPlayer.Password );
        }
    }
    
    private async Task SendRegisterRequest()
    {
        if(_registerPlayer.Password != _registerPlayer.ConfirmPassword || _registerPlayer.Id == null) return;
        var user = new HumanPlayer(_registerPlayer.Id, _registerPlayer.InGameName, Color.Black, new byte(), _registerPlayer.Password);
        await _client.Connection.SendAsync("ConfirmRegister", JsonConvert.SerializeObject(user));
    }

    private async Task SendSessionIdRequest(string userId)
    {
        await _client.Connection.SendAsync("GetSessionId", userId);
    }

    public bool IsConnected =>
        _client.Connection.State == HubConnectionState.Connected;
}