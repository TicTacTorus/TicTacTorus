@page "/ingame"
@page "/ingame/{IdString}"
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacTorus.Source.Hubs
@inject NavigationManager NavigationManager

<div class="canvas">

</div>


<div class="nav-container float-right position-absolute" style="top: 0px; right: 0px">
    <div class="box box-map">
        <div class="p-5 text-center">
            Minimap Content
        </div>
    </div>
                
    <div class=" box box-map">
        <div class="box-game">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="@_navOne" @onclick="NavClick">Chat</a>
                </li>
                <li class="nav-item">
                    <a class="@_navTwo" @onclick="NavClick">Players</a>
                </li>
            </ul>
            <div class="tab-content p-1">
                <div role="tabpanel" class="@_navContentOne" id="chat-content">
                    <textarea id="messagesListIngame" readonly>@foreach (var message in _messages)
                                                               {
                                                                   @message<br>
                                                               } 
                        </textarea> 
                    <input @bind="_messageInput" @onkeyup="SendChatMessage" disabled="@(!IsConnected)" class="w-100 align-bottom"/>
                </div>
                <div role="tabpanel" class="@_navContentTwo" id="player-content">
                    Player Content
                </div>
            </div>
        </div>
    </div>
</div>


@code
{
    private ConnectionHubClient _client;
    private string _navContentOne = "tab-pane active";
    private string _navContentTwo = "tab-pane";
    private string _navOne = "nav-link active";
    private string _navTwo = "nav-link";
    private bool _navClicked;
    
    private List<string> _messages = new List<string>();
    private string _messageInput;
    
    [Parameter] public string IdString { get; set; }
}

@functions
{
    
    private void NavClick()
    {
    //I know can be simplified, but I'm lazy (Sorry ^^)
        _navClicked = !_navClicked;
        if (_navClicked)
        {
    //Player Tab is now Active
            _navContentTwo = _navContentOne;
            _navContentOne = _navContentOne.Substring(0, _navContentOne.IndexOf(" ", StringComparison.Ordinal));
            _navTwo = _navOne;
            _navOne = _navOne.Substring(0, _navOne.IndexOf(" ", StringComparison.Ordinal));
        }
        else
        {
    //Chat Tab is now Active
            _navContentOne = _navContentTwo;
            _navContentTwo = _navContentTwo.Substring(0, _navContentTwo.IndexOf(" ", StringComparison.Ordinal));
            _navOne = _navTwo;
            _navTwo = _navTwo.Substring(0, _navTwo.IndexOf(" ", StringComparison.Ordinal));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _client = new ConnectionHubClient(NavigationManager);
        
        #region Client Listeners
        
        _client.Connection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            StateHasChanged();
        });
        
        //TODO Methods for the Clients In Game Logic 
        
        #endregion
        
        await _client.Connection.SendAsync("JoinLobby", IdString);
    }

    void SendChatMessage(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _client.Connection.SendAsync("SendMessage", IdString, "Tim", _messageInput);
            _messageInput = "";
        }
    }

    void SendSystemMessage(string message)
    {
        _client.Connection.SendAsync("SendMessage", IdString, "Game", message);
    }
    /*
    void SendChangedLobbyParameter(string lobbyParam, string changedValue)
    {
        _hubConnection.SendAsync("ChangeLobbyStat", IdString, lobbyParam, changedValue);
    }*/

    public bool IsConnected =>
        _client.Connection.State == HubConnectionState.Connected;
    
}