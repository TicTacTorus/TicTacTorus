@page "/user/{userid}"

@using System.Diagnostics
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacTorus.Source.Hubs
@using TicTacTorus.Source.PlayerSpecificContent
@using TicTacTorus.Source.Persistence
@using System.Drawing
@using Newtonsoft.Json
@using TicTacTorus.Source
@using TicTacTorus.Source.LoginContent.Security
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager

<div class="my-5 lobbies-grid">
    <button class="btn-back" onclick="location.href ='/';">
        <svg class="bi bi-arrow-left" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M5.854 4.646a.5.5 0 010 .708L3.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z" clip-rule="evenodd"/>
            <path fill-rule="evenodd" d="M2.5 8a.5.5 0 01.5-.5h10.5a.5.5 0 010 1H3a.5.5 0 01-.5-.5z" clip-rule="evenodd"/>
        </svg>
    </button>
    <h1 class="headers my-auto">TicTacTorus</h1>
</div>

@if(hasLoaded)
{
<div class="d-flex justify-content-center">
    <div class="row">
        <div class="col-sm-8 col-md-5 col-lg-4 mx-auto m-2">
            <div class="box w-100">
                <div class="text-center mx-4">
                    <div class="my-3">
                        <b>
                            <h1>@userid</h1></b>
                    </div>
                    <!-- if logged in player == userid inputs enabled else disabled ### -->
                    @if (userid.Equals(_user))
                    {
                        <div><b>In-Game Name</b></div>
                        <input type="text" @bind="_newName" @onkeyup="ChangePlayerName" placeholder=@_profile.InGameName/>
                        <div class="mt-2"><b>Password</b></div>
                        <input type="password" @onkeyup="ChangePassword" @bind="pw1" placeholder="**********"/>
                        <div class="mt-2"><b>Confirm Password</b></div>
                        <input type="password" @onkeyup="ChangePassword" @bind="pw2" placeholder="**********"/>
                    }
                    else
                    {
                        @if (_profile != null)
                        {
                            <div><b>In-Game Name</b></div>
                            <p> @_profile.InGameName</p>
                        }
                    }
                    <hr class="mx-2">
                    <div class="box-only mt-2 p-1" @onclick="ChangeSymbol">
                        <img src="/Media/Images/circle.png" title="Change profile picture" alt="profile picture"/>
                    </div>
                    <div class="text-center my-3">
                        <b>Symbol Color</b>
                        <input type="color" value="@HexConverter(_profile.PlrColor)"/>
                        <!-- ### -->
                    </div>
                </div>
                <button class="btn btn-end-custom">Replay List</button>
            </div>
        </div>
                
        <div class="col-sm-8 col-md-7 col-lg-8 mx-auto m-2">
            <div class="box p-2">
                <div class="text-center mx-4">
                    <h3 class="text-center mt-1"><b>Statistics</b></h3>
                    <hr>
                    <div class="row">
                        <div class="col box-only p-2 m-1">
                            <h5 class="text-center mt-2">Games played</h5>
                            <hr>
                            <h5><b>173</b></h5>
                        </div>
                        <div class="col box-only p-2 m-1">
                            <h5 class="text-center mt-2">Wins</h5>
                            <hr>
                            <h5><b>40</b></h5>
                        </div>
                        <div class="col box-only p-2 m-1">
                            <h5 class="text-center mt-2">Symbols placed</h5>
                            <hr>
                            <h5><b>1024</b></h5>
                        </div>
                        <div class="col box-only p-2 m-1">
                            <h5 class="text-center mt-2">4x Streaks</h5>
                            <hr>
                            <h5><b>23</b></h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
}
else if (errorMessage != null)
{
    <div class="d-flex justify-content-center">
        <div class="row">
            <div class="col-sm-8 col-md-5 col-lg-4 mx-auto m-2">
                <div class="box w-100">
                    <div class="text-center mx-4">
                        <div class="my-1">
                            @errorMessage
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter] 
    public string userid { get; set; }
    
    private static ConnectionHubClient _client;
    private string _user { get; set; }
    private static HumanPlayer LoggedInUser { get; set; }

    private HumanPlayer _profile;
    private static string _newName { get; set; }
    private static string pw1 { get; set; }
    private static string pw2 { get; set; }

    private bool hasLoaded = false;
    private string errorMessage = null;
}

@functions
{

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _client = new ConnectionHubClient(NavigationManager);

            if ((LoggedInUser = await ProtectedSessionStorage.GetAsync<HumanPlayer>("LoginData")) != null)
            {
                _user = LoggedInUser.ID;
                StateHasChanged();
            }
            else
            {
                _user = "";
                StateHasChanged();
            }

            if (LoggedInUser != null) await _client.Connection.SendAsync("GetPlayerStats", LoggedInUser.ID, userid);
        }
        
        #region listener

        _client.Connection.On<string, string>("ReceiveStatsNoAuthorisation", (player, stats) =>
        {
            // TODO anpassen
            _profile = JsonConvert.DeserializeObject<HumanPlayer>(player);
            _profile.playerStats = JsonConvert.DeserializeObject<PlayerStats>(stats);
            hasLoaded = true;
            StateHasChanged();
        });
        
        _client.Connection.On<string, string>("ReceiveStatsAsOwner", (player, stats) =>
        {
            // TODO anpassen
            _profile = JsonConvert.DeserializeObject<HumanPlayer>(player);
            _profile.playerStats = JsonConvert.DeserializeObject<PlayerStats>(stats);
            hasLoaded = true;
            StateHasChanged();
        });

        _client.Connection.On<string>("Error", (message) =>
        {
            errorMessage = message;
            StateHasChanged();
        });

    #endregion

    }
    
    private static string HexConverter(System.Drawing.Color c)
    {
        String rtn = String.Empty;
        try
        {
            rtn = "#" + c.R.ToString("X2") + c.G.ToString("X2") + c.B.ToString("X2");
        }
        catch (Exception ex)
        {
            //doing nothing
            Console.Write(ex);
        }

        return rtn;
    }
    
    protected override void OnParametersSet()
    {
    //TODO send request to server
        if (PersistenceStorage.CheckPlayerIdIsUnique(userid))
        { 
            NavigationManager.NavigateTo("/?error=userDoesNotExist");
        }
    }

    private static void ChangeSymbol()
    {
        // TODO Send message to server, add/update symbol to database
    }

    private static void ChangeColor()
    {
        // TODO
    }

    private static void ChangePassword(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (pw1 != "" && pw2 != "")
            {
                if (pw1.Equals(pw2))
                {
                    SaltedHash s = new SaltedHash(pw1);
                    PersistenceStorage.UpdateSaltHash(LoggedInUser.ID, s.Salt, s.Hash);
                    pw1 = "";
                    pw2 = "";
                }
            }
        }
    }

    private static async Task ChangePlayerName(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await _client.Connection.SendAsync("ChangeIngameName", LoggedInUser.ID, _newName);
            _newName = "";
        }
    }
}
