@page "/user/{userid}"
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacTorus.Source.Hubs
@using TicTacTorus.Source.PlayerSpecificContent
@using TicTacTorus.Source.Persistence
@using System.Drawing
@using Newtonsoft.Json
@using TicTacTorus.Source.LoginContent.Security
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager

<div class="my-5 lobbies-grid">
    <button class="btn-back" onclick="location.href ='/';">
        <svg class="bi bi-arrow-left" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M5.854 4.646a.5.5 0 010 .708L3.207 8l2.647 2.646a.5.5 0 01-.708.708l-3-3a.5.5 0 010-.708l3-3a.5.5 0 01.708 0z" clip-rule="evenodd"/>
            <path fill-rule="evenodd" d="M2.5 8a.5.5 0 01.5-.5h10.5a.5.5 0 010 1H3a.5.5 0 01-.5-.5z" clip-rule="evenodd"/>
        </svg>
    </button>
    <h1 class="headers my-auto">TicTacTorus</h1>
</div>

@if(_hasLoaded)
{
<div class="d-flex justify-content-center">
    <div class="row">
        <div class="col-sm-8 col-md-5 col-lg-4 mx-auto m-2">
            <div class="box w-100">
                <div class="text-center mx-4">
                    <div class="my-3">
                        <b>
                            <h1>@Userid</h1></b>
                    </div>
                    <!-- if logged in player == userid inputs enabled else disabled ### -->
                    @if (Userid.Equals(_user))
                    {
                        <div><b>In-Game Name</b></div>
                        <input type="text" @bind="_newName" @onkeyup="ChangePlayerName" placeholder=@_profileIngameName/>
                        <div class="mt-2"><b>Password</b></div>
                        <input type="password" @onkeyup="ChangePassword" @bind="_pw1" placeholder="**********"/>
                        <div class="mt-2"><b>Confirm Password</b></div>
                        <input type="password" @onkeyup="ChangePassword" @bind="_pw2" placeholder="**********"/>
                    }
                    else
                    {
                        @if (_profile != null)
                        {
                            <div><b>In-Game Name</b></div>
                            <p> @_profileIngameName</p>
                        }
                    }
                    <hr class="mx-2">
                    <div class="box-only mt-2 p-1" @onclick="ChangeSymbol">
                        <img src="/Media/Images/circle.png" title="Change profile picture" alt="profile picture"/>
                    </div>
                    <div class="text-center my-3">
                        <b>Symbol Color</b>
                        @if (Userid.Equals(_user))
                        {
                            <input type="color" @bind="_profileColor"/>
                            <button class="btn btn-end-custom" @onclick="@ChangeColor">Change Color</button>
                        }
                        else
                        {
                            <input type="color" @bind="_profileColor" disabled/>
                        }
                        <!-- ### -->
                    </div>
                </div>
            </div>
        </div>
                
        <div class="col-sm-8 col-md-7 col-lg-8 mx-auto m-2">
            <div class="box p-2">
                <div class="text-center mx-4">
                    <h3 class="text-center mt-1"><b>Statistics</b></h3>
                    <hr>
                    <div class="row">
                        <div class="col box-only p-2 m-1">
                            <h5 class="text-center mt-2">Games played</h5>
                            <hr>
                            <h5><b>@_gamesPlayed</b></h5>
                        </div>
                        <div class="col box-only p-2 m-1">
                            <h5 class="text-center mt-2">Wins</h5>
                            <hr>
                            <h5><b>@_gamesWon</b></h5>
                        </div>
                        <div class="col box-only p-2 m-1">
                            <h5 class="text-center mt-2">Symbols placed</h5>
                            <hr>
                            <h5><b>1024</b></h5>
                        </div>
                        <div class="col box-only p-2 m-1">
                            <h5 class="text-center mt-2">4x Streaks</h5>
                            <hr>
                            <h5><b>23</b></h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
}
else if (_errorMessage != null)
{
    <div class="d-flex justify-content-center">
        <div class="row">
            <div class="col-sm-8 col-md-5 col-lg-4 mx-auto m-2">
                <div class="box w-100">
                    <div class="text-center mx-4">
                        <div class="my-1">
                            @_errorMessage
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter] 
    public string Userid { get; set; }
    
    private static ConnectionHubClient _client;
    private string _user;
    private static HumanPlayer _loggedInUser;

    private HumanPlayer _profile;
    private string _profileIngameName;
    private static string _profileColor;

    private PlayerStats _stats;
    private static int _gamesWon;
    private static int _gamesPlayed;
    private static List<int> _chains;

    private static string _newName;
    private static string _pw1;
    private static string _pw2;

    private bool _hasLoaded = true;
    private string _errorMessage = null;
}

@functions
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _client = new ConnectionHubClient(NavigationManager);

            if ((_loggedInUser = await ProtectedSessionStorage.GetAsync<HumanPlayer>("LoginData")) != null)
            {
                _user = _loggedInUser.ID;
                StateHasChanged();
            }
            else
            {
                _user = "";
                StateHasChanged();
            }
            
            StateHasChanged();
        }
        
        await _client.Connection.SendAsync("GetPlayer", Userid);
        await _client.Connection.SendAsync("GetStats", Userid);
        
        #region listener
        
        _client.Connection.On<string>("ReceivePlayer", (player) =>
        {
            _profile = JsonConvert.DeserializeObject<HumanPlayer>(player);
            _profileIngameName = _profile.InGameName;
            _profileColor = HexConverter(_profile.PlrColor);
            StateHasChanged();
        });
        
        _client.Connection.On("PasswordIsChanged", () =>
        {
            StateHasChanged();
        });

        _client.Connection.On<Color>("ColorIsChanged", color =>
        {
            _profileColor = HexConverter(color);
            StateHasChanged();
        });
        
        _client.Connection.On<Color>("SymbolIsChanged", color =>
        {
            // TODO Symbol stuff
            StateHasChanged();
        });

        _client.Connection.On<string>("ReceiveStats", (stats) =>
        {
            _stats = JsonConvert.DeserializeObject<PlayerStats>(stats);
            _gamesPlayed = _stats.PlayedGames;
            _gamesWon = _stats.WonGames;
            _chains = _stats.Chains;
            StateHasChanged();
        });

        _client.Connection.On<string>("NameIsChanged", (name) =>
        {
            _profileIngameName = name;
            StateHasChanged();
        });

        _client.Connection.On<string>("Error", (message) =>
        {
            _errorMessage = message;
            StateHasChanged();
        });

    #endregion

    }
    
    private static string HexConverter(System.Drawing.Color c)
    {
        String rtn = String.Empty;
        try
        {
            rtn = "#" + c.R.ToString("X2") + c.G.ToString("X2") + c.B.ToString("X2");
        }
        catch (Exception ex)
        {
            //doing nothing
            Console.Write(ex);
        }

        return rtn;
    }
    
    protected override void OnParametersSet()
    {
    //TODO send request to server
        if (PersistenceStorage.CheckPlayerIdIsUnique(Userid))
        { 
            NavigationManager.NavigateTo("/?error=userDoesNotExist");
        }
    }

    private static async Task ChangeSymbol()
    {
        // TODO Symbol stuff
        await _client.Connection.SendAsync("ChangePlayerSymbol", _loggedInUser.ID, 1);
    }

    private static async Task ChangeColor()
    {
        await _client.Connection.SendAsync("ChangeSymbolColor", _profileColor);
    }

    private static async Task ChangePassword(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!_pw1.Equals(""))
            {
                if (_pw1.Equals(_pw2))
                {
                    SaltedHash s = new SaltedHash(_pw1);
                    await _client.Connection.SendAsync("ChangePassword", _loggedInUser.ID, s.Salt, s.Hash);
                    _pw1 = "";
                    _pw2 = "";
                }
            }
        }
    }

    private static async Task ChangePlayerName(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await _client.Connection.SendAsync("ChangeIngameName", _loggedInUser.ID, _newName);
            _newName = "";
        }
    }
}
