@page "/ingame"
@page "/ingame/{IdString}"
@using Microsoft.AspNetCore.SignalR.Client
@using TicTacTorus.Source.Hubs
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@using TicTacTorus.Source.Canvas
@using TicTacTorus.Source.Generator
@using TicTacTorus.Source.Ingame.GridSpecificContent.Chunk
@using TicTacTorus.Source.Ingame.GridSpecificContent.Position
@using System.Security.Principal
@using TicTacTorus.Source
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IJSRuntime JSRuntime;

<!--<div class="fill">&nbsp;</div>-->

<div class="canvas" @onwheel="MouseScrollHandler">
    <BECanvas @ref="_canvasGame" Width="640" Height="480"></BECanvas>
</div>


<div class="nav-container float-right position-absolute" style="top: 0px; right: 0px">
    <div class="box box-map">
        <!--<div class="p-5 text-center">
            Minimap Content
        </div>-->
        <BECanvas @ref="_canvasMap" Width="100" Height="100"></BECanvas>
    </div>
                
    <div class=" box box-map">
        <div class="box-game">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="@_navOne" @onclick="NavClick">Chat</a>
                </li>
                <li class="nav-item">
                    <a class="@_navTwo" @onclick="NavClick">Players</a>
                </li>
            </ul>
            <div class="tab-content p-1">
                <div role="tabpanel" class="@_navContentOne" id="chat-content">
                    <textarea id="messagesListIngame" readonly>@foreach (var message in _messages)
                                                               {
                                                                   @message<br>
                                                               } 
                        </textarea> 
                    <input @bind="_messageInput" @onkeyup="SendChatMessage" disabled="@(!IsConnected)" class="w-100 align-bottom"/>
                </div>
                <div role="tabpanel" class="@_navContentTwo" id="player-content">
                    Player Content
                </div>
            </div>
        </div>
    </div>
</div>


@code
{
    private ConnectionHubClient _client;
    private string _navContentOne = "tab-pane active";
    private string _navContentTwo = "tab-pane";
    private string _navOne = "nav-link active";
    private string _navTwo = "nav-link";
    private bool _navClicked;
    
    private List<string> _messages = new List<string>();
    private string _messageInput;
    
    [Parameter] public string IdString { get; set; }
    
    
    //canvas stuff
    private static Canvas2DContext _contextGame, _contextMap;
    protected static BECanvasComponent _canvasGame, _canvasMap;

    private static Grid _grid = GenerateTempMockGrid();
    private static GlobalPos _lastChange = new GlobalPos(0, 0);

    private static GameRenderer _rendererGame = new GameRenderer(_grid);
    private static MapRenderer _rendererMap = new MapRenderer(null);
    
    private static HumanPlayer User { get; set; }

}

@functions
{
    #region Navigation Stuff
    
    private void NavClick()
    {
    //I know can be simplified, but I'm lazy (Sorry ^^)
        _navClicked = !_navClicked;
        if (_navClicked)
        {
    //Player Tab is now Active
            _navContentTwo = _navContentOne;
            _navContentOne = _navContentOne.Substring(0, _navContentOne.IndexOf(" ", StringComparison.Ordinal));
            _navTwo = _navOne;
            _navOne = _navOne.Substring(0, _navOne.IndexOf(" ", StringComparison.Ordinal));
        }
        else
        {
    //Chat Tab is now Active
            _navContentOne = _navContentTwo;
            _navContentTwo = _navContentTwo.Substring(0, _navContentTwo.IndexOf(" ", StringComparison.Ordinal));
            _navOne = _navTwo;
            _navTwo = _navTwo.Substring(0, _navTwo.IndexOf(" ", StringComparison.Ordinal));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _client = new ConnectionHubClient(NavigationManager);
        
        #region Client Listeners
        
        _client.Connection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            StateHasChanged();
        });
        
        //TODO Methods for the Clients In Game Logic 
        
        #endregion
        
        await _client.Connection.SendAsync("JoinLobby", IdString);
    }
    
    #endregion
    #region Site Functionality

    void SendChatMessage(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _client.Connection.SendAsync("SendMessage", IdString, User.InGameName, _messageInput);
            _messageInput = "";
        }
    }

    void SendSystemMessage(string message)
    {
        _client.Connection.SendAsync("SendMessage", IdString, "Game", message);
    }
    /*
    void SendChangedLobbyParameter(string lobbyParam, string changedValue)
    {
        _hubConnection.SendAsync("ChangeLobbyStat", IdString, lobbyParam, changedValue);
    }*/

    public bool IsConnected =>
        _client.Connection.State == HubConnectionState.Connected;

    public async void MouseScrollHandler(WheelEventArgs evnt)
    {
        if (Math.Abs(evnt.DeltaY) < 0.0001)
        {
            return;
        }

        var width = await JSRuntime.InvokeAsync<double>("client_width");
        var height = await JSRuntime.InvokeAsync<double>("client_height");
        var dx = evnt.ClientX - width/2;
        var dy = evnt.ClientY - height/2;
        
        _rendererGame.Zoom(-Math.Sign(evnt.DeltaY));
        await RedrawGame();
    }

    #endregion
    #region Canvas
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //todo current problems:
        //resizing the window also needs to trigger a resize of the canvas.
        //moving the viewpoint of the game renderer stops new lines from rendering.

        if (firstRender)
        {
            User = await ProtectedSessionStorage.GetAsync<HumanPlayer>("LoginData");
        }
        
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("stretch_first_canvas");
            await UpdateCanvasSize();
        }
        
        _contextGame = await _canvasGame.CreateCanvas2DAsync();
        _contextMap = await _canvasMap.CreateCanvas2DAsync();
        
        if (firstRender)
        {
            await RedrawGame();
            await RedrawMap();
            
            await _rendererGame.Draw((int)_canvasGame.Width, (int)_canvasGame.Height, _contextGame);
            await _rendererMap.Draw((int) _canvasMap.Width, (int) _canvasMap.Height, _contextMap);
        }
    }

    [JSInvokable]
    public async Task UpdateCanvasSize()
    {
        var width = await JSRuntime.InvokeAsync<int>("client_width");
        var height = await JSRuntime.InvokeAsync<int>("client_height");
        _canvasGame.Width = width;
        _canvasGame.Height = height;
    }
    
    [JSInvokable]
    public static async Task RedrawGame()
    {
        _contextGame = await _canvasGame.CreateCanvas2DAsync();
        await _rendererGame.Draw((int)_canvasGame.Width, (int)_canvasGame.Height, _contextGame);
    }
    
    [JSInvokable]
    public static async Task RedrawMap()
    {
        _contextMap = await _canvasMap.CreateCanvas2DAsync();
        await _rendererMap.Draw((int)_canvasMap.Width, (int)_canvasMap.Height, _contextMap);
    }
    
    public static Grid GenerateTempMockGrid()
    {
        //todo remove me once we synchronize the real grid!
        const int width = 50, height = 50, players = 20;
        var items = (int)Math.Sqrt(width * height);
        
        var grid = new Grid(width, height);
        var rnd = new Random();
        var posGen = new PositionGenerator(rnd);
        grid.SetSymbol(new GlobalPos(0, 0), 0);
        for (var i = 0; i < items; ++i)
        {
            var pos = posGen.GetGlobalPos(width, height);
            grid.SetSymbol(pos, (byte)rnd.Next(players), false);
        }
        return grid;
    }

    void CanvasResizeHandler()
    {
        Console.WriteLine("Resize, bitches!");
    }
    
    #endregion
    
}
